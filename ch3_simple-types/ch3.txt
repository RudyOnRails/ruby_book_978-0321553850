floats must have one digit to left of decimal point

integers are objects of type Fixnum
floating points are objects of type Float

assign multiple variables at a time
  x,y = 1,2
  x = y = z = 2

methods ending in ?, return a true or false
methods ending in !, alter the value of the object

numbers that begin with a zero (aside from just zero itself) are non-base-10 numbers
0144 is base-8 (octal) for 100

numbers that begin with 0x or 0X are in hexidecimal format
nubmers that begin with 0b or 0B are in binary

computers typically have difficulty accurately representing floating point numbers.
a workaround is to use integers, representing 1.09 as 109, then dividing as necessary.
another is to use the Ruby Standard Library's BigDecimal class. More in ch9, modules and includes.

arithmetic operators can be used with assignment operators, but not with parallel assignment.

when dividing integers, the result will be an integer, so the fix is to use at least one floating-point number

+, -, /, * are basics
** returns a number to a given power
% returns the remainder of a division

overflow and underflow:
when the value of data assigned to a variable requires more memory than what was alotted, the data can't be adequately represented.
this is called an overflow (when a value beomes too large). when a value is too small it is called an underflow.

Ruby handles large integers w/o a problem. the max value of a Fixnum should be about 1,073,741,823. Variables bigger than that value will
be converted to Bignum, which have no maximum value. If Bignum values drop below Fixnum max, they will be converted back to objects of Fixnum class.

Floating point numbers can still suffer from over/underflow. Overflows and underflows result in positive or negative infinity values, while underflows
result in zero.

max float value is stored in the Float::MAX constant, the minimum float is stored in Float::Min

dividing a number by 0 is not legal in Ruby. dividing by 0 generates a ZeroDivisionError

dividing a float by 0 returns the value of infinity

dividing 0.0 by 0.0 returns NaN, Not a Number

Ruby handles the division of negative numbers differently than C and Java. negative integer division is rounded towards negative infinity, not zero.

Order of operators:
exponents
unary minus operator (-, the negation of a number)
multiplication
division
modulus
addition and subtraction

Math related methods in Math module
sqrt, log, sin, cos, tan
two constants, PI and E

Math.method
Math::CONSTANT:

instead of referring to the class in the script, you can include it:
include Math

if method only has one argument, you don't need parens, but it looks better with them and keeps structure

rand alone returns float > 0.0, but < 1.0.

sqrt always returns a float

Ruby 1.9 adds even? and odd? methods. each returning a boolean

some numeric methods duplicate arithmetic operators...
  div performs / 
  modulo performs %
  power! returns exponential calculation

strings...

CONSTANTS:
To refer to a constant in a module, use the scope resolution operator (::). ie: Math::PI

time objects

.utc
.utc?
local
Time.now(year, month, day, hour, sec, microseconds)
month can take 3 letter abbreviation as string, of course
convert a timestamp to integer by just calling .to_i method































